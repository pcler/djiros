/*****************************************************************************
 * @Brief     A module template. It is recommended to write a singleton
 * @Version   1.1
 * @Author    Your Name
 * @Created   2015/11/17
 * @Modified  2015/11/17
 *****************************************************************************/

#ifndef _MAV2DJI_MODULENAME_H_
#define _MAV2DJI_MODULENAME_H_


#include "../../mavHandler.h"

namespace dji2mav{

    class ModuleName {
        public:
            /**
             * @brief   Get the only instance. Lazy mode singleton
             * @return  The only instance of ModuleName
             * @warning UNSAFE FOR MULTI-THREAD! Should be called BEFORE fork
             */
            static ModuleName* getInstance() {
                if(NULL == m_instance) {
                    try {
                        m_instance = new ModuleName();
                    } catch(std::bad_alloc &m) {
                        std::cerr << "New instance of ModuleName fail: " 
                                << "at line: " << __LINE__ << ", func: " 
                                << __func__ << ", file: " << __FILE__ 
                                << std::endl;
                        perror( m.what() );
                        exit(EXIT_FAILURE);
                    }
                }
                return m_instance;
            }


            /**
             * @brief  Get the senderRecord array address
             * @return The address of senderRecord
             */
            inline const int* getSenderRecord() {
                return m_senderRecord;
            }


            /**
             * @brief  Set the sender index of specific GCS
             * @param  gcsIdx    : The index of GCS
             * @param  senderIdx : The index of sender
             * @return True if succeed or false if fail
             */
            bool setSenderIdx(uint16_t gcsIdx, int senderIdx) {
                if( !m_hdlr->isValidIdx(gcsIdx, senderIdx) )
                    return false;
                m_senderRecord[gcsIdx] = senderIdx;
                return true;
            }


            /**
             * @brief  Register new sender and use it for specific GCS
             * @param  gcsIdx : The index of GCS
             * @return True if succeed or false if fail
             */
            bool applyNewSender(uint16_t gcsIdx) {
                int newSender = m_hdlr->registerSender(gcsIdx);
                if( newSender < 0 ) {
                    printf("Fail to regiser sender for sensors in GCS #%u! "
                            "Did you set sender list too small?\n", gcsIdx);
                    return false;
                }
                m_senderRecord[gcsIdx] = newSender;
                return true;
            }


            /**
             * @brief  React to moduleName from specific GCS and execute rsp
             * @param  gcsIdx : Get the index of GCS
             * @param  msg    : Get the received message
             */
            void reactToModuleName(uint16_t gcsIdx, mavlink_message_t &msg) {

                /* do something, such as defined the state machine */

                if(NULL != m_rsp) {
                    m_rsp();
                }
            }


            /**
             * @brief  React to moduleName from all GCS and execute rsp
             * @return True if succeed or false if fail
             */
            inline void setModuleNameRsp( void (*func)() ) {
                m_rsp = func;
            }


        private:
            ModuleName() {

                m_hdlr = MavHandler::getInstance();

                try {
                    m_senderRecord = new int[m_hdlr->getMngListSize()];
                } catch(std::bad_alloc& m) {
                    std::cerr << "Failed to alloc memory for senderRecord: " 
                            << "at line: " << __LINE__ << ", func: " 
                            << __func__ << ", file: " << __FILE__ 
                            << std::endl;
                    perror( m.what() );
                    exit(EXIT_FAILURE);
                }
                for(uint16_t i = 0; i < m_hdlr->getMngListSize(); ++i) {
                    // register new sender for moduleName in every GCS
                    if( applyNewSender(i) < 0)
                        printf("Fail to register new sender for moduleName!\n");
                }

                setModuleNameData(MAV_TYPE_QUADROTOR, MAV_AUTOPILOT_GENERIC, 
                        MAV_MODE_GUIDED_DISARMED, 0, MAV_STATE_STANDBY, 3);

                setModuleNameRsp(NULL);

            }


            ~ModuleName() {
            }


            static ModuleName* m_instance;
            MavHandler* m_hdlr;
            int* m_senderRecord;

            mavlink_message_t m_sendMsg;
            mavlink_message_t m_recvMsg;
            mavlink_status_t m_recvStatus;

            void (*m_rsp)();


    };

    ModuleName* ModuleName::m_instance = NULL;

} //namespace dji2mav


#endif
